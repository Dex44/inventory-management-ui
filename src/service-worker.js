/* eslint-disable no-restricted-globals */

// Import Workbox modules
import { clientsClaim } from 'workbox-core';
import { ExpirationPlugin } from 'workbox-expiration';
import { precacheAndRoute, createHandlerBoundToURL } from 'workbox-precaching';
import { registerRoute } from 'workbox-routing';
import { StaleWhileRevalidate } from 'workbox-strategies';

clientsClaim();

// Precache assets generated by your build process
precacheAndRoute(self.__WB_MANIFEST);

// App Shell-style routing
const fileExtensionRegexp = new RegExp('/[^/?]+\\.[^/]+$');
registerRoute(
  ({ request, url }) => {
    if (request.mode !== 'navigate') return false; // Only navigation requests
    if (url.pathname.startsWith('/_')) return false; // Skip URLs starting with /_
    if (url.pathname.match(fileExtensionRegexp)) return false; // Skip resource URLs with file extensions
    return true; // Use the handler for navigation requests
  },
  createHandlerBoundToURL(process.env.PUBLIC_URL + '/index.html')
);

// Example runtime caching for static assets like images
registerRoute(
  ({ url }) => url.origin === self.location.origin && url.pathname.endsWith('.png'),
  new StaleWhileRevalidate({
    cacheName: 'images',
    plugins: [
      // Ensure cache does not grow too large
      new ExpirationPlugin({ maxEntries: 50 }),
    ],
  })
);

// Skip API requests from caching
self.addEventListener('fetch', (event) => {
  const { request } = event;

  // If the request is for an API endpoint, fetch directly without caching
  if (request.url.includes('/api/')) {
    event.respondWith(fetch(request));
    return;
  }

  // Default behavior for other requests (let Workbox handle them if needed)
});

// Enable skipWaiting to update the service worker immediately
self.addEventListener('message', (event) => {
  if (event.data && event.data.type === 'SKIP_WAITING') {
    self.skipWaiting();
  }
});

// Add any other custom logic here
